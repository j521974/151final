import java.awt.Color;
import java.util.Collection;
import java.util.Random;
import java.awt.Rectangle;


public class DShapeModel {
	private int x, y, width, height;
	private Color color;
	private Rectangle rectangle;
	private Rectangle bounds;
	private transient Collection<ModelListener> modelChangeListeners;
	
	//DShapeModel superclass should store a 
	//conceptual "bounds" rectangle defined 
	//by 4 ints: x, y, width, and height, and a Color.
	public DShapeModel(){
		this.width = 100;
		this.height = 100;
		this.color = Color.GRAY;
		this.x = new Random().nextInt(900);
		this.y = new Random().nextInt(650);
		bounds = new Rectangle(0,0,0,0);
		rectangle = new Rectangle(x,y,width,height);
	}
	public static interface ModelListerner{
		public void modelChanged(DShapeModel model);
	}
	//Enhance the DShapeModelso that it keeps a list of listeners
	//, and provide methods for the listeners to be able to 
	//add and remove themselves from the list. 
	public void addChangeListener(ModelListener listener){
		modelChangeListeners.add(listener);
	}
	public void removeChangeListener(ModelListener listener){
		modelChangeListeners.remove(listener);
	}
	//notification
	public void notification(){
		for(ModelListener l: modelChangeListeners){
			l.modelChanged(this);
		}
	}
	public void setWidth(int width){
		this.width = width;
	}
	public int getWidth(){
		return this.width;
	}
	public void setHeight(int height){
		this.height = height;
	}
	public int getHeight(){
		return this.height;
	}
	public void setX(int x){
		this.x = x;
	}
	public int getX(){
		return this.x;
	}
	public void setY(int y){
		this.y=y;
	}
	public int getY(){
		return this.y;
	}
	//loop through its listeners, and send the 
	//modelChanged()notification to each listener.
	public void setColor(Color color){
		this.color = color;
	}
	public Color getColor(){
		return this.color;
	}
	public void setRectangle(){
		rectangle = new Rectangle(x,y,width,height);
	}
	public Rectangle getRectangle(){
		return rectangle;
	}
	public void setBounds(Rectangle bounds){
		boolean change = !this.equals(bounds);
		this.bounds = bounds;
		if(change){
			for(ModelListener Listener:modelChangeListeners){
				Listener.modelChanged(this);
			}
		}
	}
	public Rectangle getBounds() {
		// TODO Auto-generated method stub
		return bounds;
	}
}
